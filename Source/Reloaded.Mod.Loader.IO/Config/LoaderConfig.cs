using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text.Json.Serialization;
using Reloaded.Mod.Loader.IO.Misc;
using Reloaded.Mod.Loader.IO.Weaving;

namespace Reloaded.Mod.Loader.IO.Config
{
    public class LoaderConfig : ObservableObject
    {
        /// <summary>
        /// The name of the configuration file as stored on disk.
        /// </summary>
        public const string ConfigFileName = "ReloadedII.json";

        private const string DefaultApplicationConfigDirectory = "Apps";
        private const string DefaultModConfigDirectory = "Mods";
        private const string DefaultPluginConfigDirectory = "Plugins";

        /// <summary>
        /// Contains the location of the last directory that launched Reloaded Mod Loader II.
        /// </summary>
        public string InstallDirectory { get; set; } = String.Empty;

        /// <summary>
        /// The directory which houses all Reloaded Application information (e.g. Games etc.)
        /// </summary>
        public string ApplicationConfigDirectory { get; set; } = String.Empty;

        /// <summary>
        /// Contains the directory which houses all Reloaded mods.
        /// </summary>
        public string ModConfigDirectory { get; set; } = String.Empty;

        /// <summary>
        /// Contains the directory which houses all Reloaded plugins.
        /// </summary>
        public string PluginConfigDirectory { get; set; } = String.Empty;

        /// <summary>
        /// Contains a list of all plugins that are enabled, by config paths relative to plugin directory.
        /// </summary>
        public string[] EnabledPlugins
        {
            get => _enabledPlugins;
            set => _enabledPlugins = value ?? Constants.EmptyStringArray;
        }

        public bool FirstLaunch { get; set; } = true;
        public bool AutoAcceptUpdates { get; set; } = false;

        private string[] _enabledPlugins;

        /* Some mods are universal :wink: */

        public LoaderConfig()
        {
            ResetMissingDirectories();
        }

        // Creates directories/folders if they do not exist.
        public void ResetMissingDirectories()
        {
            ApplicationConfigDirectory = IfNotExistsMakeDefaultDirectory(ApplicationConfigDirectory, DefaultApplicationConfigDirectory);
            ModConfigDirectory = IfNotExistsMakeDefaultDirectory(ModConfigDirectory, DefaultModConfigDirectory);
            PluginConfigDirectory = IfNotExistsMakeDefaultDirectory(PluginConfigDirectory, DefaultPluginConfigDirectory);
        }

        // Sets default directory if does not exist.
        private static string IfNotExistsMakeDefaultDirectory(string directoryPath, string defaultDirectory)
        {
            if (!Directory.Exists(directoryPath))
                return CreateDirectoryRelativeToCurrent(defaultDirectory);

            return directoryPath;
        }

        /// <summary>
        /// Creates a directory relative to the current directory
        /// and returns the full path of the supplied directory parameter.
        /// </summary>
        private static string CreateDirectoryRelativeToCurrent(string directoryPath)
        {
            string fullDirectoryPath = Path.GetFullPath(directoryPath);
            Directory.CreateDirectory(fullDirectoryPath);
            return fullDirectoryPath;
        }

        /* (Mostly) Autogenerated */

        protected bool Equals(LoaderConfig other)
        {
            return string.Equals(InstallDirectory, other.InstallDirectory) &&
                   string.Equals(ApplicationConfigDirectory, other.ApplicationConfigDirectory) &&
                   string.Equals(ModConfigDirectory, other.ModConfigDirectory) &&
                   string.Equals(PluginConfigDirectory, other.PluginConfigDirectory) &&
                   EnabledPlugins.SequenceEqualWithNullSupport(other.EnabledPlugins);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;

            if (ReferenceEquals(this, obj))
                return true;

            if (obj.GetType() != this.GetType())
                return false;

            return Equals((LoaderConfig)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (InstallDirectory != null ? InstallDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ApplicationConfigDirectory != null ? ApplicationConfigDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ModConfigDirectory != null ? ModConfigDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (PluginConfigDirectory != null ? PluginConfigDirectory.GetHashCode() : 0);

                if (EnabledPlugins != null)
                {
                    foreach (var plugin in EnabledPlugins)
                    {
                        hashCode = (hashCode * 397) ^ plugin.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
    }
}
