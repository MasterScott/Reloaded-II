using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using Reloaded.Mod.Loader.IO.Interfaces;
using Reloaded.Mod.Loader.IO.Utility;

namespace Reloaded.Mod.Loader.IO.Config
{
    public class LoaderConfig : IConfigCleanup
    {
        /// <summary>
        /// The name of the configuration file as stored on disk.
        /// </summary>
        public const string ConfigFileName = "ReloadedII.json";

        private const string DefaultApplicationConfigDirectory = "Apps";
        private const string DefaultModConfigDirectory = "Mods";
        private const string DefaultPluginConfigDirectory = "Plugins";

        /// <summary>
        /// Contains the location of the last directory that launched Reloaded Mod Loader II.
        /// </summary>
        public string InstallDirectory { get; set; } = "";

        /// <summary>
        /// The directory which houses all Reloaded Application information (e.g. Games etc.)
        /// </summary>
        public string ApplicationConfigDirectory { get; set; } = "";

        /// <summary>
        /// Contains the directory which houses all Reloaded mods.
        /// </summary>
        public string ModConfigDirectory { get; set; } = "";

        /// <summary>
        /// Contains the directory which houses all Reloaded plugins.
        /// </summary>
        public string PluginConfigDirectory { get; set; } = "";

        /// <summary>
        /// Contains a list of all plugins that are enabled, by config paths relative to plugin directory.
        /// </summary>
        public string[] EnabledPlugins { get; set; } 

        /// <summary>
        /// A mapping of Application ID to many Mod IDs which declare which applications support which mods.
        /// </summary>
        public Dictionary<string, string[]> ModSupportMatrix { get; set; }

        /* Some mods are universal :wink: */

        public LoaderConfig()
        {
            ModSupportMatrix = new Dictionary<string, string[]>();
            EnabledPlugins = new string[0];
            ResetMissingDirectories();
        }

        public void CleanupConfig()
        {
            ResetMissingDirectories();

            // Cleanup application list.
            var newApplicationSet = ConfigCleanupUtility.FilterNonexistingAppIds(ModSupportMatrix.Keys);

            foreach (var key in ModSupportMatrix.Keys.ToArray())
            {
                // Remove key it does not exist.
                if (!newApplicationSet.Contains(key))
                {
                    ModSupportMatrix.Remove(key);
                    continue;
                }
                
                // If key exists, try to remove nonexisting mods.
                ModSupportMatrix[key] = ConfigCleanupUtility.FilterNonexistingModIds(ModSupportMatrix[key]).ToArray();
            }
        }

        // Creates directories/folders if they do not exist.
        private void ResetMissingDirectories()
        {
            ApplicationConfigDirectory = IfNotExistsMakeDefaultDirectory(ApplicationConfigDirectory, DefaultApplicationConfigDirectory);
            ModConfigDirectory = IfNotExistsMakeDefaultDirectory(ModConfigDirectory, DefaultModConfigDirectory);
            PluginConfigDirectory = IfNotExistsMakeDefaultDirectory(PluginConfigDirectory, DefaultPluginConfigDirectory);
        }

        // Sets default directory if does not exist.
        private string IfNotExistsMakeDefaultDirectory(string directoryPath, string defaultDirectory)
        {
            if (!Directory.Exists(directoryPath))
                return CreateDirectoryRelativeToCurrent(defaultDirectory);

            return directoryPath;
        }

        /// <summary>
        /// Creates a directory relative to the current directory
        /// and returns the full path of the supplied directory parameter.
        /// </summary>
        private string CreateDirectoryRelativeToCurrent(string directoryPath)
        {
            string fullDirectoryPath = Path.GetFullPath(directoryPath);
            Directory.CreateDirectory(fullDirectoryPath);
            return fullDirectoryPath;
        }

        /* Autogenerated */

        private bool ModMatrixEqual(Dictionary<string, string[]> first, Dictionary<string, string[]> second)
        {
            // Do length check first.
            if (first.Count == second.Count) 
            {
                // Verify all keys match between dictionaries.
                foreach (var key in first.Keys)
                {
                    if (second.Keys.Contains(key))
                    {
                        // Verify mapped mods to application match.
                        if (! Enumerable.SequenceEqual(first[key], second[key]))
                            return false;
                    }
                    else
                        return false;
                }
            }

            return true;
        }

        protected bool Equals(LoaderConfig other)
        {
            return string.Equals(InstallDirectory, other.InstallDirectory) && 
                   string.Equals(ApplicationConfigDirectory, other.ApplicationConfigDirectory) && 
                   string.Equals(ModConfigDirectory, other.ModConfigDirectory) && 
                   string.Equals(PluginConfigDirectory, other.PluginConfigDirectory) &&
                   Enumerable.SequenceEqual(EnabledPlugins, other.EnabledPlugins) &&
                   ModMatrixEqual(this.ModSupportMatrix, other.ModSupportMatrix);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;

            if (ReferenceEquals(this, obj))
                return true;

            if (obj.GetType() != this.GetType())
                return false;

            return Equals((LoaderConfig)obj);
        }

        [SuppressMessage("ReSharper", "NonReadonlyMemberInGetHashCode")]
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (InstallDirectory != null ? InstallDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ApplicationConfigDirectory != null ? ApplicationConfigDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ModConfigDirectory != null ? ModConfigDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (PluginConfigDirectory != null ? PluginConfigDirectory.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (EnabledPlugins != null ? EnabledPlugins.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ModSupportMatrix != null ? ModSupportMatrix.GetHashCode() : 0);
                return hashCode;
            }
        }
    }
}
